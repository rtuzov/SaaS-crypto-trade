services:
  # Message Broker
  redpanda:
    image: redpandadata/redpanda:latest
    command: redpanda start --mode dev-container --overprovisioned --smp 1 --memory 1G --reserve-memory 0M --kafka-addr PLAINTEXT://0.0.0.0:9092 --advertise-kafka-addr PLAINTEXT://redpanda:9092
    ports:
      - "9092:9092"
      - "9644:9644"
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9644/v1/status/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
    restart: unless-stopped
    networks:
      - trading-network

  # Database
  postgres:
    image: postgres:14
    env_file:
      - ./config/postgres.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
      - ./temporal-schema.sql:/docker-entrypoint-initdb.d/temporal-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: postgres -c 'max_connections=1000'
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    restart: unless-stopped
    networks:
      - trading-network

  # Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5
    command:
      - start-dev
      - --import-realm
    env_file:
      - ./config/keycloak.env
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
        required: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: 1
          memory: "1073741824"
    restart: unless-stopped
    networks:
      - trading-network

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    restart: unless-stopped
    networks:
      - trading-network

  grafana:
    image: grafana/grafana:10.2.0
    env_file:
      - ./config/grafana.env
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: unless-stopped
    networks:
      - trading-network

  # Microservices
  trade-executor:
    build: ./trade-executor
    env_file:
      - ./config/trade-executor.env
    ports:
      - "8000:8000"
    depends_on:
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  trade-monitor:
    build: ./trade-monitor
    env_file:
      - ./config/trade-monitor.env
    depends_on:
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: unless-stopped
    networks:
      - trading-network
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  historical-analytics:
    build: ./historical-analytics
    env_file:
      - ./config/historical-analytics.env
    depends_on:
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  telegram-collector:
    build:
      context: ./telegram-collector
      dockerfile: Dockerfile
    depends_on:
      redpanda:
        condition: service_healthy
        required: true
    deploy:
      resources:
        limits:
          cpus: 0.5
          memory: "536870912"
    environment:
      KAFKA_BROKER: redpanda:9092
      TELEGRAM_BOT_TOKEN: 8164809131:AAEGmi4-uSZl1m2OwEgNp4BOWNZSnXUpYDk
      TELEGRAM_CHAT_ID: "-4691635561"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      timeout: 10s
      interval: 15s
      retries: 5
      start_period: 60s
    networks:
      - trading-network
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./config/alertmanager.env:/etc/alertmanager/alertmanager.env
    env_file:
      - ./config/alertmanager.env
    ports:
      - "9093:9093"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Temporal
  temporal:
    image: temporalio/auto-setup:1.22.3
    ports:
      - "7233:7233"
    environment:
      - DB=postgresql
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=postgres123
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=temporal
      - POSTGRES_SEEDS=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped

  temporal-admin-tools:
    image: temporalio/admin-tools:1.22.3
    command: ["tail", "-f", "/dev/null"]
    depends_on:
      temporal:
        condition: service_healthy
    networks:
      - trading-network

  # Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 1G
    restart: unless-stopped
    networks:
      - trading-network

  # Cache
  redis:
    image: redis:7.2.4
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - trading-network
    restart: unless-stopped

networks:
  trading-network:
    driver: bridge

volumes:
  redpanda_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  minio_data:
  redis_data: 